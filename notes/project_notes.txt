# TODO
- add doc strings to everything

make unit tests before changing anything

features
- another class for series of games   some way to play 1000 games computer vs computer
  Tournament(player1, player2, 100) plays 100 games


features that come with object restructure:
- en passant, complicated may have to make chess board keep piece objects.
  only valid the move after your opponent moved 2 squares forward
- castle, have to keep track of if king ever moved, or if rook ever moved

cleaning up code:
- make chess piece class into a stub class that cant be called
- rethink variable/method names
- check to see if unit tests can be shortened or made easier to modify
- clean up Board.is_attacking_king(flipped=True) ugly logic
- clean up Board.is_being_attacked, had to do ugly thing with modifying state
  and the whole thing is redundant, should return after first is_attacked.
  Ideally make it not have to modify state.
- is_square_attacked is duct taped together modifying the state of the board
- make moves into a set not a list, when removing moves that put king in danger, possible_moves - king_in_danger_moves
  could take a long time with not much benefit

edge cases to test:
- kings helping with check-mate
- castle body block
- moving another piece which ends up putting your king in check
- king cant take a piece if it puts him in check

Things to consider:
- should both ChessGame and ChessBoard have default board?