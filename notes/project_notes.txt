
Things to remember
- make unit tests before refactoring anything
- change doc strings whenever code changes


# TODO
- figure out why imports are inconsistent between pycharm and cmd prompt.
  Sometimes they change daily it seems.

features
- another class for series of games   some way to play 1000 games computer vs computer
  Tournament(player1, player2, 100) plays 100 games
- board evaluate method
- minimax AI to choose move
- player class DNA/gene pool class that includes many players,
  it can have method called play_games(100) or next_generation()
- for computation heavy parts of the project use python -O main.py (-O or -OO)
  to prevent assertion and hopefully speed things up.


features that come with object restructure:
- en passant, complicated may have to make chess board keep piece objects.
  only valid the move after your opponent moved 2 squares forward
- castle, have to keep track of if king ever moved, or if rook ever moved

cleaning up code:
- flip player turn method? Its used quite a bit.
- break apart is_square_attacked, its 120 lines long and easy to break apart
- make chess piece class into a stub class that cant be called
- rethink variable/method names
- check to see if unit tests can be shortened or made easier to modify
- clean up Board.is_attacking_king(flipped=True) ugly logic
- clean up Board.is_being_attacked, had to do ugly thing with modifying state
  and the whole thing is redundant, should return after first is_attacked.
  Ideally make it not have to modify state.
- is_square_attacked is duct taped together modifying the state of the board
- make moves into a set not a list, when removing moves that put king in danger, possible_moves - king_in_danger_moves
  could take a long time with not much benefit
- remove things from board.py if possible, its very long

edge cases to test:
- kings helping with check-mate
- castle body block
- moving another piece which ends up putting your king in check
- king cant take a piece if it puts him in check

Things to consider:
- should both ChessGame and ChessBoard have default board?
  board should be able to go to any state on the board,
  game should be playing a game where the person who goes first could be chosen
  therefore, chess board should have default board and chess game decides who goes first
- only print board for player right before they move? maybe a default
  parameter that you can use to see computer's board
- for board evaluation, should king be counted? Should it be 1000?
- how to choose what type of AI in the client code